generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                 String              @id @default(cuid())
  name               String
  email              String              @unique
  emailVerified      DateTime?
  image              String?
  password           String?
  bio                String?
  timezone           String              @default("UTC")
  preferences        Json                @default("{}")
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  accounts           Account[]
  sessions           Session[]
  activityLogs       ActivityLog[]
  comments           Comment[]
  createdMilestones  Milestone[]
  customFields       CustomFieldValue[]
  milestoneAssignees MilestoneAssignee[]
  notifications      Notification[]
  projectMembers     ProjectMember[]
  createdProjects    Project[]           @relation("ProjectCreator")
  assignedTasks      Task[]              @relation("TaskAssignee")
  createdTasks       Task[]              @relation("TaskCreator")
  timeEntries        TimeEntry[]
  workspaceMembers   WorkspaceMember[]
  createdWorkspaces  Workspace[]         @relation("WorkspaceCreator")
  workspaceInvites   WorkspaceInvite[]   @relation("WorkspaceInviter")
  projectInvites     ProjectInvite[]     @relation("ProjectInviter")
  invitedWorkspaceMembers WorkspaceMember[] @relation("WorkspaceInviter")
  invitedProjectMembers   ProjectMember[]   @relation("ProjectInviter")

  @@map("users")
}

model Workspace {
  id           String            @id @default(cuid())
  name         String
  slug         String            @unique
  description  String?
  image        String?
  settings     Json              @default("{}")
  plan         String            @default("free")
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  creatorId    String
  customFields CustomField[]
  labels       Label[]
  milestones   Milestone[]
  projects     Project[]
  members      WorkspaceMember[]
  invites      WorkspaceInvite[]
  taskStatuses TaskStatus[]
  creator      User              @relation("WorkspaceCreator", fields: [creatorId], references: [id])

  @@map("workspaces")
}

model WorkspaceMember {
  id          String    @id @default(cuid())
  role        String    @default("member")
  status      String    @default("active") // active, pending, suspended
  joinedAt    DateTime  @default(now())
  invitedAt   DateTime?
  invitedBy   String?
  workspaceId String
  userId      String?
  user        User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  inviter     User?     @relation("WorkspaceInviter", fields: [invitedBy], references: [id])

  @@unique([workspaceId, userId])
  @@map("workspace_members")
}

model WorkspaceInvite {
  id          String          @id @default(cuid())
  email       String
  role        String          @default("member")
  status      String          @default("pending") // pending, accepted, expired, revoked
  token       String          @unique
  expiresAt   DateTime
  invitedAt   DateTime        @default(now())
  acceptedAt  DateTime?
  workspaceId String
  invitedBy   String
  workspace   Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  inviter     User            @relation("WorkspaceInviter", fields: [invitedBy], references: [id])

  @@unique([workspaceId, email])
  @@map("workspace_invites")
}

model Project {
  id          String          @id @default(cuid())
  name        String
  key         String
  description String?
  status      String          @default("active")
  priority    String          @default("medium")
  visibility  String          @default("private")
  color       String          @default("#2563eb")
  icon        String?
  startDate   DateTime?
  endDate     DateTime?
  progress    Int             @default(0)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  workspaceId String
  creatorId   String
  comments    Comment[]
  labels      Label[]
  milestones  Milestone[]
  members     ProjectMember[]
  invites     ProjectInvite[]
  creator     User            @relation("ProjectCreator", fields: [creatorId], references: [id])
  workspace   Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  tasks       Task[]

  @@unique([workspaceId, key])
  @@map("projects")
}

model ProjectMember {
  id        String   @id @default(cuid())
  role      String   @default("member")
  status    String   @default("active") // active, pending, suspended
  joinedAt  DateTime @default(now())
  invitedAt DateTime?
  invitedBy String?
  projectId String
  userId    String?
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  inviter   User?    @relation("ProjectInviter", fields: [invitedBy], references: [id])

  @@unique([projectId, userId])
  @@map("project_members")
}

model ProjectInvite {
  id        String       @id @default(cuid())
  email     String
  role      String       @default("member")
  status    String       @default("pending") // pending, accepted, expired, revoked
  token     String       @unique
  expiresAt DateTime
  invitedAt DateTime     @default(now())
  acceptedAt DateTime?
  projectId String
  invitedBy String
  project   Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  inviter   User         @relation("ProjectInviter", fields: [invitedBy], references: [id])

  @@unique([projectId, email])
  @@map("project_invites")
}

model Milestone {
  id          String              @id @default(cuid())
  name        String
  description String?
  status      String              @default("upcoming")
  priority    String              @default("medium")
  startDate   DateTime?
  endDate     DateTime?
  progress    Int                 @default(0)
  sprintGoal  String?
  capacity    Int?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  workspaceId String
  creatorId   String
  projectId   String?
  assignees   MilestoneAssignee[]
  workspace   Workspace           @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  creator     User                @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  project     Project?            @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks       Task[]

  @@map("milestones")
}

model MilestoneAssignee {
  id          String    @id @default(cuid())
  milestoneId String
  userId      String
  role        String    @default("ASSIGNEE")
  milestone   Milestone @relation(fields: [milestoneId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([milestoneId, userId])
  @@map("milestone_assignees")
}

model Task {
  id                String             @id @default(cuid())
  title             String
  description       String?
  status            String             @default("todo")
  priority          String             @default("medium")
  type              String             @default("task")
  number            Int
  storyPoints       Int?
  originalEstimate  Int?
  remainingEstimate Int?
  timeSpent         Int                @default(0)
  dueDate           DateTime?
  startDate         DateTime?
  position          Float              @default(0)
  parentId          String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  projectId         String
  milestoneId       String?
  assigneeId        String?
  creatorId         String
  statusId          String?
  comments          Comment[]
  customFields      CustomFieldValue[]
  labels            TaskLabel[]
  assignee          User?              @relation("TaskAssignee", fields: [assigneeId], references: [id])
  creator           User               @relation("TaskCreator", fields: [creatorId], references: [id])
  milestone         Milestone?         @relation(fields: [milestoneId], references: [id])
  taskStatus        TaskStatus?        @relation(fields: [statusId], references: [id], onDelete: SetNull)
  parent            Task?              @relation("TaskHierarchy", fields: [parentId], references: [id])
  children          Task[]             @relation("TaskHierarchy")
  project           Project            @relation(fields: [projectId], references: [id], onDelete: Cascade)
  timeEntries       TimeEntry[]

  @@unique([projectId, number])
  @@map("tasks")
}

model TaskStatus {
  id          String   @id @default(cuid())
  name        String
  color       String   @default("bg-gray-500")
  bgColor     String   @default("bg-gray-100")
  textColor   String   @default("text-gray-800")
  badgeColor  String   @default("bg-gray-200")
  order       Int      @default(0)
  isDefault   Boolean  @default(false)
  workspaceId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  tasks       Task[]

  @@unique([workspaceId, name])
  @@map("task_statuses")
}

model Label {
  id          String      @id @default(cuid())
  name        String
  color       String      @default("#3b82f6")
  description String?
  workspaceId String
  projectId   String?
  project     Project?    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  workspace   Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  tasks       TaskLabel[]

  @@unique([workspaceId, name])
  @@map("labels")
}

model TaskLabel {
  id      String @id @default(cuid())
  taskId  String
  labelId String
  label   Label  @relation(fields: [labelId], references: [id], onDelete: Cascade)
  task    Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([taskId, labelId])
  @@map("task_labels")
}

model CustomField {
  id          String             @id @default(cuid())
  name        String
  type        String
  options     Json?
  required    Boolean            @default(false)
  description String?
  workspaceId String
  values      CustomFieldValue[]
  workspace   Workspace          @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, name])
  @@map("custom_fields")
}

model CustomFieldValue {
  id          String      @id @default(cuid())
  value       Json
  fieldId     String
  taskId      String
  updatedById String
  updatedAt   DateTime    @updatedAt
  field       CustomField @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  task        Task        @relation(fields: [taskId], references: [id], onDelete: Cascade)
  updatedBy   User        @relation(fields: [updatedById], references: [id])

  @@unique([fieldId, taskId])
  @@map("custom_field_values")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  type      String   @default("comment")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String
  taskId    String?
  projectId String?
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  task      Task?    @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model TimeEntry {
  id          String    @id @default(cuid())
  description String?
  duration    Int
  startTime   DateTime?
  endTime     DateTime?
  date        DateTime  @default(now())
  userId      String
  taskId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  task        Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("time_entries")
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  message   String
  type      String
  read      Boolean  @default(false)
  data      Json?
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model ActivityLog {
  id        String   @id @default(cuid())
  action    String
  entity    String
  entityId  String
  changes   Json?
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@map("activity_logs")
}
